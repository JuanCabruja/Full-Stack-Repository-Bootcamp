/* Tipos de Display: None, Inline, Block, Inline-Block */
/* para seleccinar todos los atributos (class) cuyo valor empiece por las carcaterísticas señaladas hacemos:
el caracter ^ nos indica 'El principio de algo */
/* cuando hablamos de display hablamos del tipo de caja que engloba el elemento
Por ejemplo si esta tiene  no bordes*/

/* [class^="box"]{

background-color: turquoise;

} COMENTADA XQ INTERFIERE CON EL ÚLTIMO EJERCICIO DEL VIERNES*/

/* .box-0, .box-1, .box-2, .box-.3, .box-4, .box-5, .box-6 {
background-color: turquoise;
} es exactamente lo mismo. */

.box-0 {
    display: none;
}

/* Aquí vemos los ejemplos de Inline e Inline-Block, en ambos casos los objetos pasan a ser
Inline solo que en el primero se respeta el Block y por tanto puede tener márgenes, padding*/

.box-3, .box-4, .box-3 p, .box-4 p {
    display: inline-block;
}

.box-5, .box-6, .box-5 p, .box-6 p {
    display: inline;
}

.parent {
    background-color:blue;
    height: 100px;
    width: 100px;
    padding-top: 50px;
    margin-left: 150px;
    margin-right: 150pc;
}

.child {
    background-color: red;
    height: 50px;
    
}

/* Centrar Horizontalmente un objeto */
.x-centered {
    background: yellowgreen;
    height: 100px;
    width: 50%;
    margin: auto;
}

/* Posicinamientos: 
static
relative: relativo al punto de la ventana en el que estaba al inicio
fixed (fijo en un punto de la ventana)
absolute (Posición absoluta respecto al contenedor padre), 
sticky (alterna entre relativo y absluto en función del scroll)
flotante se convirten en cajas
flotantes que se mueven de izquierda a derecha*/


/*Posición relativa y Tags compartidos*/

.rectangle{
    background-color: crimson;
    height: 50px;
    width: 25%;
}

.pos-relative {
    position: relative;
    left: 150px;
    top: -50px;
    z-index: -1;
}

/* Posición Absoluta*/
.pos-absolute-parent {
    height: 300px;
    border: 15px solid red;
    position: relative;
}

.pos-absolute-child {
    height: 50px;
    width: 50px;
    background-color: #333;

    position: absolute; /* si queremos que la posición sea absoluta respecto al padre
    primero debemos poner al padre una característica position: relative;*/
    bottom: 50px;
    right: 50px;
}

/* Fixed */

.pos-fixed {
    background-color: #333;
    padding: 10px 20px;

    bottom: 40px;
    right: 40px;
    position: fixed;
}


.pos-fixed a {
    color: white;
    text-decoration: none;
}

/* Posición Sticky*/
/* Una vez lo pasas con el scroll te sigue en la posición indicada*/

.pos-sticky {
    background-color: teal;
    padding: 15px 25px;

    position: sticky;
    top: 0;
}

.pos-sticky a{
    text-decoration: none;
    color: white;
}

/*Posición Float: Divs dentr de otros divs*/

.pos-float-parent {
    border: 5px solid blue;

    /*Para gestionar desbordamientos obligamos al padre a abarcar a los hijos*/
    overflow: hidden;
}

.pos-float-child-1 {
    background-color: brown;
    height: 100px;
    width: 33.3%;
    color: white;
    float: left;
}

.pos-float-child-2 {
    background-color: darkblue;
    height: 100px;
    width: 33.3%;
    color: white;
    float: right;
}

.pos-float-child-3 {
    background-color: green;
    height: 50px;
    width: 100%;
    color: white;
    
}

.pos-float-child-4 {
    background-color: yellowgreen;
    height: 50px;
    width: 100%;
    color: white;
    clear: both;
}

/* Overflow es una propiedad de posicionamiento que gestiona cualquier tipo de
desbodarmiento, esta propiedad si se la otorgamos al padre, nos soluciona 
ese tipo de problemas. 

Sirve también para evitar utilizar el ClearFix*/

/* Overflow: Gestión del desbordamiento del contenido */

[class^="overflow-parent"] {
    width: 200px;
    height: 100px;
    border: 3px dashed black;
    margin-bottom: 100px;
}

.overflow-parent-1 {
    overflow: hidden;
}

.overflow-parent-2 {
    overflow: visible;
}

.overflow-parent-3 {
    overflow: scroll;
}

/*Tamaño de cajas / Box Sizing */

.box-sizing-parent {
    width: 200px;
    height: 200px;
    border: 5px solid salmon;
}

.box-sizing-child {
    width: 100%;
    height: 50px;
    border: 10px solid green;

    box-sizing: content-box; /* Valor por defecto*/

}

.border-box {
    border: 10px solid blue; /* Esta es la que por norma general queremos usar*/
    box-sizing: border-box;
}


/* Diseño Responsive*/

/* A través de la propiedad @media se pueden establecer breakpoints para disparar unas reglas, por ejemplo.*/

@media only screen and (max-width: 758px) {
    .container-1, .container-2, .container-3 {
        float: none;
        width: 100%;
    }
}

/*Como podemos ver, si se dan esas condiciones, ese código sobreescribe los anteriores al ser el ultimo*/